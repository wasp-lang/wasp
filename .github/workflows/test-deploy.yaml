name: Test Wasp Deploy

on:
  push:
    paths:
      - "waspc/**"
      - ".github/**"
    branches:
      - main
      # TODO: remove before merging this PR
      - miho-railway-deployment-test-ci
    tags:
      - v*
  workflow_dispatch:

concurrency:
  group: test-deploy
  cancel-in-progress: true

env:
  # We use run_id becuase it's shorter than commit SHA since
  # the max length for project name in Railway is 25 characters.
  APP_PREFIX: ci-${{ github.run_id }}
  FLY_API_TOKEN: ${{ secrets.FLY_GITHUB_TESTING_TOKEN }}
  FLY_REGION: mia
  RAILWAY_API_TOKEN: ${{ secrets.RAILWAY_GITHUB_TESTING_TOKEN }}
  RAILWAY_WASP_WORKSPACE_NAME: Wasp
  APP_TO_DEPLOY: waspc/examples/todoApp

jobs:
  test_deploy:
    name: Deploy, test and cleanup (${{ matrix.provider }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        provider: [fly, railway]
    environment:
      name: ${{ matrix.provider }}-deploy-test

    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup-haskell

      - uses: actions/setup-node@v4
        with:
          cache: "npm"
          node-version: "22"

      - name: Install Wasp CLI
        working-directory: waspc
        run: ./run install

        # NOTE: We tell users to install the latest version of Fly CLI,
        # so we use it here too.
      - name: Install Fly CLI
        if: matrix.provider == 'fly'
        uses: superfly/flyctl-actions/setup-flyctl@v1

      - name: Install Railway CLI
        if: matrix.provider == 'railway'
        run: npm install -g @railway/cli

      - name: Deploy app
        working-directory: ${{ env.APP_TO_DEPLOY }}
        run: |
          set -e

          # NOTE: This assumes env var values don't contain:
          #   - The character `#`.
          #   - An empty line (i.e., there are no multiline env values).
          mapfile -t ENV_VAR_ARGUMENTS < <(
            cat .env.server.example |
            sed -E 's/#.*//' |
            awk 'NF {$1=$1;print}' |
            sed -E 's/^/--server-secret\n/'
          )

          echo "Deploying with prefix: $APP_PREFIX (provider: ${{ matrix.provider }})"

          if [ "${{ matrix.provider }}" = "fly" ]; then
            # NOTE:
            # - The `yes` command is necessary because the `fly launch` command
            # prompts for confirmation.
            # - We use a Bash array for `$ENV_VAR_ARGUMENTS` to ensure proper
            # word splitting (i.e., force Bash to interpret the flags separately
            # instead of passing it as a single string value).
            yes | wasp-cli deploy fly launch "$APP_PREFIX" "$FLY_REGION" --org wasp-testing "${ENV_VAR_ARGUMENTS[@]}"
          else
            # NOTE:
            # - We use a Bash array for `$ENV_VAR_ARGUMENTS` to ensure proper
            # word splitting (i.e., force Bash to interpret the flags separately
            # instead of passing it as a single string value).
            wasp-cli deploy railway launch "$APP_PREFIX" --workspace $RAILWAY_WASP_WORKSPACE_NAME "${ENV_VAR_ARGUMENTS[@]}"
          fi

      - name: Save deployed app info
        id: save_info
        working-directory: ${{ env.APP_TO_DEPLOY }}
        run: |
          if [ "${{ matrix.provider }}" = "fly" ]; then
            echo "SERVER_HOSTNAME=$(flyctl status -j -c fly-server.toml | jq -r '.Hostname')" >> "$GITHUB_ENV"
            echo "CLIENT_HOSTNAME=$(flyctl status -j -c fly-client.toml | jq -r '.Hostname')" >> "$GITHUB_ENV"
          else
            server_service_name="${APP_PREFIX}-server"
            client_service_name="${APP_PREFIX}-client"

            echo "SERVER_HOSTNAME=$(railway status --json | jq -r --arg NAME "$server_service_name" '.services.edges[] | select(.node.name == $NAME) | .node.serviceInstances.edges[0].node.domains.serviceDomains[0].domain')" >> "$GITHUB_ENV"
            echo "CLIENT_HOSTNAME=$(railway status --json | jq -r --arg NAME "$client_service_name" '.services.edges[] | select(.node.name == $NAME) | .node.serviceInstances.edges[0].node.domains.serviceDomains[0].domain')" >> "$GITHUB_ENV"
            echo "PROJECT_ID=$(railway status --json | jq -r '.id')" >> "$GITHUB_ENV"
          fi

      - name: Smoke test the server
        run: |
          curl --fail --silent -X POST https://$SERVER_HOSTNAME/operations/get-date | jq -e '.json'

      - name: Smoke test the client
        run: |
          curl --fail --silent https://$CLIENT_HOSTNAME | grep 'ToDo App'

      - name: Prepare Fly CLI for cleanup
        if: always() && matrix.provider == 'fly'
        uses: superfly/flyctl-actions/setup-flyctl@v1
        with:
          # NOTE: We pinned the Fly because we don't want the changes in the
          # Fly CLI to affect our cleanup procedure. `fly destroy` isn't a part
          # of Wasp, we're just incidentally using the same tool Wasp uses.
          version: v0.3.164

      - name: Clean up testing app from Fly.io
        if: always() && matrix.provider == 'fly'
        run: |
          # NOTE: We are relying on Wasp's naming conventions here
          flyctl apps destroy -y $APP_PREFIX-server || true
          flyctl apps destroy -y $APP_PREFIX-client || true
          flyctl apps destroy -y $APP_PREFIX-db || true

      - name: Prepare Railway CLI for cleanup
        if: always() && matrix.provider == 'railway'
        run: npm install -g @railway/cli

      - name: Clean up testing app from Railway
        if: always() && matrix.provider == 'railway'
        run: |
          project_id=$PROJECT_ID

          curl --request POST \
          --url https://backboard.railway.com/graphql/v2 \
          --header "Authorization: Bearer $RAILWAY_API_TOKEN" \
          --header 'Content-Type: application/json' \
          --data "{\"query\":\"mutation projectDelete { projectDelete(id: \\\"$project_id\\\") }\"}"

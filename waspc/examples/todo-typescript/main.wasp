app TodoTypescript {
  wasp: {
    version: "^0.12.0"
  },
  title: "ToDo TypeScript",

  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {
         userSignupFields: import { googleUserSignupFields } from "@src/user/userSignupFields.js"
      }, // this is a very naive implementation, use 'email' in production instead
      // google: {
      //   userSignupFields: import { googleUserSignupFields } from "@src/user/userSignupFields.js"
      // },
      // gitHub: {
      //   userSignupFields: import { githubUserSignupFields } from "@src/user/userSignupFields.js"
      // },
      // email: {
      //   userSignupFields: import { userSignupFields } from "@src/user/userSignupFields.js",
      //   fromField: {
      //     email: "waspy@app.com"
      //   },
      //   emailVerification: {
      //     clientRoute: EmailVerificationRoute,
      //   },
      //   passwordReset: {
      //     clientRoute: PasswordResetRoute,
      //   }
      // } // https://wasp-lang.dev/docs/guides/email-auth
    },
    onAuthFailedRedirectTo: "/login",
  },
  emailSender: {
    provider: Dummy
  },
  db: {
    seeds: [
      import { seedMyDb } from "@src/db/seeds.js"
    ]
  }
}

// Use Prisma Schema Language (PSL) to define our entities: https://www.prisma.io/docs/concepts/components/prisma-schema
// Run `wasp db migrate-dev` in the CLI to create the database tables
// Then run `wasp db studio` to open Prisma Studio and view your db models
entity User {=psl
  id          Int     @id @default(autoincrement())
  address     String
  tasks       Task[]
psl=}

entity Task {=psl
  id          Int     @id @default(autoincrement())
  description String
  isDone      Boolean @default(false)
  user        User   @relation(fields: [userId], references: [id])
  userId      Int
psl=}

route RootRoute { path: "/", to: MainPage }
page MainPage {
  authRequired: true,
  // todo(filip): LSP features are broken beucase I haven't yet updated LSP to the new structure.
  component: import { MainPage } from "@src/MainPage.tsx"
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import { LoginPage } from "@src/user/auth.tsx"
}

route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import { SignupPage } from "@src/user/auth.tsx"
}

// route EmailVerificationRoute { path: "/email-verify", to: EmailVerification }
// page EmailVerification {
//   component: import { EmailVerificationPage } from "@src/user/auth.tsx"
// }

// route RequestPasswordResetRoute { path: "/request-password-reset", to: RequestPasswordReset }
// page RequestPasswordReset {
//   component: import { RequestPasswordResetPage } from "@src/user/auth.tsx"
// }


// route PasswordResetRoute { path: "/password-reset", to: PasswordReset }
// page PasswordReset {
//   component: import { PasswordResetPage } from "@src/user/auth.tsx"
// }

query getTasks {
  // We specify the JS implementation of our query (which is an async JS function)
  // Even if you use TS and have a queries.ts file, you will still need to import it using the .js extension.
  // see here for more info: https://wasp-lang.dev/docs/tutorials/todo-app/03-listing-tasks#wasp-declaration
  fn: import { getTasks } from "@src/task/queries.js",
  // We tell Wasp that this query is doing something with the `Task` entity. With that, Wasp will
  // automatically refresh the results of this query when tasks change.
  entities: [Task]
}

action createTask {
  fn: import { createTask } from "@src/task/actions.js",
  entities: [Task]
}

action updateTask {
  fn: import { updateTask } from "@src/task/actions.js",
  entities: [Task]
}

action deleteTasks {
  fn: import { deleteTasks } from "@src/task/actions.js",
  entities: [Task],
}

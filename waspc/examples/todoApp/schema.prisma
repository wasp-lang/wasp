datasource db {
  provider = "postgresql"
  // Wasp requires that the url is set to the DATABASE_URL environment variable.
  url      = env("DATABASE_URL")
}

// Wasp requires the `prisma-client-js` generator to be present.
generator client {
  provider = "prisma-client-js"
}

model User {
  id Int @id @default(autoincrement())

  isOnAfterSignupHookCalled        Boolean @default(false)
  isOnAfterLoginHookCalled         Boolean @default(false)
  isOnAfterEmailVerifiedHookCalled Boolean @default(false)

  tasks                Task[]
  address              String?
  votes                TaskVote[]
  uppercaseTextRequests UppercaseTextRequest[]
}

enum TaskVisibility {
  PRIVATE
  LINK_ONLY
  PUBLIC
}

model Task {
  id          Int            @id @default(autoincrement())
  description String
  isDone      Boolean        @default(false)
  user        User           @relation(fields: [userId], references: [id])
  userId      Int
  votes       TaskVote[]
  visibility  TaskVisibility @default(PRIVATE)
}

model TaskVote {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId Int
  task   Task   @relation(fields: [taskId], references: [id])
  taskId Int
}

model UppercaseTextRequest {
  id        String                    @id @default(cuid())
  input     String
  output    String?
  user      User                      @relation(fields: [userId], references: [id])
  userId    Int
  state     UppercaseTextRequestState @default(PENDING)
  createdAt DateTime                  @default(now())
}

enum UppercaseTextRequestState {
  PENDING
  SUCCESS
  ERROR
}

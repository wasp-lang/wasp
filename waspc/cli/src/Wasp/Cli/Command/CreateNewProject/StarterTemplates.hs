{-# LANGUAGE TupleSections #-}

module Wasp.Cli.Command.CreateNewProject.StarterTemplates
  ( getStarterTemplates,
    StarterTemplate (..),
    DirBasedTemplateMetadata (..),
    findTemplateByString,
    defaultStarterTemplate,
    readWaspProjectSkeletonFiles,
  )
where

import Data.Foldable (find)
import Data.Text (Text)
import StrongPath (File', Path, Rel, System, reldir, (</>))
import Wasp.Cli.Common (WaspProjectDir)
import qualified Wasp.Cli.GithubRepo as GhRepo
import qualified Wasp.Cli.Interactive as Interactive
import qualified Wasp.Data as Data
import Wasp.Util.IO (listDirectoryDeep, readFileStrict)

data StarterTemplate
  = -- | Template from a Github repo.
    GhRepoStarterTemplate !GhRepo.GithubRepoRef !DirBasedTemplateMetadata
  | -- | Template from a disk, that comes bundled with wasp CLI.
    LocalStarterTemplate !DirBasedTemplateMetadata
  | -- | Template that will be dynamically generated by Wasp AI based on user's input.
    AiGeneratedStarterTemplate
  deriving (Eq)

data DirBasedTemplateMetadata = DirBasedTemplateMetadata
  { _name :: !String,
    _path :: !String, -- Path to a directory containing template files.
    _description :: !String
  }
  deriving (Eq, Show)

instance Show StarterTemplate where
  show (GhRepoStarterTemplate _ metadata) = _name metadata
  show (LocalStarterTemplate metadata) = _name metadata
  show AiGeneratedStarterTemplate = "ai-generated"

instance Interactive.IsOption StarterTemplate where
  showOption = show

  showOptionDescription (GhRepoStarterTemplate _ metadata) = Just $ _description metadata
  showOptionDescription (LocalStarterTemplate metadata) = Just $ _description metadata
  showOptionDescription AiGeneratedStarterTemplate =
    Just "ðŸ¤– Describe an app in a couple of sentences and have Wasp AI generate initial code for you. (experimental)"

getStarterTemplates :: IO [StarterTemplate]
getStarterTemplates = do
  return
    [ defaultStarterTemplate,
      todoTsStarterTemplate,
      openSaasStarterTemplate,
      AiGeneratedStarterTemplate
    ]

defaultStarterTemplate :: StarterTemplate
defaultStarterTemplate =
  LocalStarterTemplate $
    DirBasedTemplateMetadata
      { _name = "basic",
        _path = "basic",
        _description = "Simple starter template with a single page."
      }

openSaasStarterTemplate :: StarterTemplate
openSaasStarterTemplate =
  GhRepoStarterTemplate
    ( GhRepo.GithubRepoRef
        { GhRepo._repoOwner = "wasp-lang",
          GhRepo._repoName = "open-saas",
          GhRepo._repoReferenceName = "main"
        }
    )
    ( DirBasedTemplateMetadata
        { _name = "saas",
          _description = "Everything a SaaS needs! Comes with Auth, ChatGPT API, Tailwind, Stripe payments and more. Check out https://opensaas.sh/ for more details.",
          _path = "."
        }
    )

todoTsStarterTemplate :: StarterTemplate
todoTsStarterTemplate =
  GhRepoStarterTemplate
    ( GhRepo.GithubRepoRef
        { GhRepo._repoOwner = "wasp-lang",
          GhRepo._repoName = "starters",
          GhRepo._repoReferenceName = "main"
        }
    )
    ( DirBasedTemplateMetadata
        { _name = "todo-ts",
          _description = "Simple but well-rounded Wasp app implemented with Typescript & full-stack type safety.",
          _path = "todo-ts"
        }
    )

findTemplateByString :: [StarterTemplate] -> String -> Maybe StarterTemplate
findTemplateByString templates query = find ((== query) . show) templates

readWaspProjectSkeletonFiles :: IO [(Path System (Rel WaspProjectDir) File', Text)]
readWaspProjectSkeletonFiles = do
  skeletonFilesDir <- (</> [reldir|Cli/templates/skeleton|]) <$> Data.getAbsDataDirPath
  skeletonFilePaths <- listDirectoryDeep skeletonFilesDir
  mapM (\path -> (path,) <$> readFileStrict (skeletonFilesDir </> path)) skeletonFilePaths

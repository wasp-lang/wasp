{-# LANGUAGE TupleSections #-}

module Wasp.Cli.Command.CreateNewProject.StarterTemplates
  ( getStarterTemplates,
    StarterTemplate (..),
    DirBasedTemplateMetadata (..),
    findTemplateByString,
    defaultStarterTemplate,
    readWaspProjectSkeletonFiles,
    getTemplateStartingInstructions,
  )
where

import Data.Foldable (find)
import Data.Text (Text)
import StrongPath (Dir', File', Path, Path', Rel, Rel', System, reldir, (</>))
import Wasp.Cli.Common (WaspProjectDir)
import qualified Wasp.Cli.GithubRepo as GhRepo
import qualified Wasp.Cli.Interactive as Interactive
import qualified Wasp.Data as Data
import Wasp.Util.IO (listDirectoryDeep, readFileStrict)
import qualified Wasp.Util.Terminal as Term

data StarterTemplate
  = -- | Template from a Github repo.
    GhRepoStarterTemplate !GhRepo.GithubRepoRef !DirBasedTemplateMetadata
  | -- | Template from a disk, that comes bundled with wasp CLI.
    LocalStarterTemplate !DirBasedTemplateMetadata
  | -- | Template that will be dynamically generated by Wasp AI based on user's input.
    AiGeneratedStarterTemplate

data DirBasedTemplateMetadata = DirBasedTemplateMetadata
  { _name :: !String,
    _path :: !(Path' Rel' Dir'), -- Path to a directory containing template files.
    _description :: !String,
    _buildStartingInstructions :: !StartingInstructionsBuilder
  }

instance Show StarterTemplate where
  show (GhRepoStarterTemplate _ metadata) = _name metadata
  show (LocalStarterTemplate metadata) = _name metadata
  show AiGeneratedStarterTemplate = "ai-generated"

instance Interactive.IsOption StarterTemplate where
  showOption = show

  showOptionDescription (GhRepoStarterTemplate _ metadata) = Just $ _description metadata
  showOptionDescription (LocalStarterTemplate metadata) = Just $ _description metadata
  showOptionDescription AiGeneratedStarterTemplate =
    Just "ðŸ¤– Describe an app in a couple of sentences and have Wasp AI generate initial code for you. (experimental)"

type StartingInstructionsBuilder = String -> String

-- | Returns instructions for running the newly created (from the template) Wasp project.
-- Instructions assume that user is positioned right next to the just created project directory,
-- whose name is provided via projectDirName.
getTemplateStartingInstructions :: String -> StarterTemplate -> String
getTemplateStartingInstructions projectDirName = \case
  GhRepoStarterTemplate _ metadata -> _buildStartingInstructions metadata projectDirName
  LocalStarterTemplate metadata -> _buildStartingInstructions metadata projectDirName
  AiGeneratedStarterTemplate -> buildBasicStartingInstructions projectDirName

buildBasicStartingInstructions :: String -> String
buildBasicStartingInstructions projectDirName =
  {- ORMOLU_DISABLE -}
  unlines [
                                    "To run your new app, do:",
                                    "",
    Term.applyStyles [Term.Bold] $  "    cd " ++ projectDirName,
    Term.applyStyles [Term.Bold]    "    wasp start"
    ]
  {- ORMOLU_ENABLE -}

getStarterTemplates :: IO [StarterTemplate]
getStarterTemplates = do
  return
    [ defaultStarterTemplate,
      todoTsStarterTemplate,
      openSaasStarterTemplate,
      embeddingsStarterTemplate,
      AiGeneratedStarterTemplate
    ]

defaultStarterTemplate :: StarterTemplate
defaultStarterTemplate =
  LocalStarterTemplate $
    DirBasedTemplateMetadata
      { _path = [reldir|basic|],
        _name = "basic",
        _description = "Simple starter template with a single page.",
        _buildStartingInstructions = buildBasicStartingInstructions
      }

openSaasStarterTemplate :: StarterTemplate
openSaasStarterTemplate =
  simpleGhRepoTemplate
    ("open-saas", [reldir|.|])
    ( "saas",
      "Everything a SaaS needs! Comes with Auth, ChatGPT API, Tailwind, Stripe payments and more."
        <> " Check out https://opensaas.sh/ for more details."
    )
    buildBasicStartingInstructions

todoTsStarterTemplate :: StarterTemplate
todoTsStarterTemplate =
  simpleGhRepoTemplate
    ("starters", [reldir|todo-ts|])
    ( "todo-ts",
      "Simple but well-rounded Wasp app implemented with Typescript & full-stack type safety."
    )
    buildBasicStartingInstructions

embeddingsStarterTemplate :: StarterTemplate
embeddingsStarterTemplate =
  simpleGhRepoTemplate
    ("starters", [reldir|embeddings|])
    ( "embeddings",
      "Comes with code for generating vector embeddings and performing vector similarity search."
    )
    buildBasicStartingInstructions

simpleGhRepoTemplate :: (String, Path' Rel' Dir') -> (String, String) -> StartingInstructionsBuilder -> StarterTemplate
simpleGhRepoTemplate (repoName, tmplPathInRepo) (tmplDisplayName, tmplDescription) buildStartingInstructions =
  GhRepoStarterTemplate
    ( GhRepo.GithubRepoRef
        { GhRepo._repoOwner = waspGhOrgName,
          GhRepo._repoName = repoName,
          GhRepo._repoReferenceName = waspVersionTemplateGitTag
        }
    )
    ( DirBasedTemplateMetadata
        { _name = tmplDisplayName,
          _description = tmplDescription,
          _path = tmplPathInRepo,
          _buildStartingInstructions = buildStartingInstructions
        }
    )

waspGhOrgName :: String
waspGhOrgName = "wasp-lang"

-- NOTE: As version of Wasp CLI changes, so we should update this tag name here,
--   and also create it on gh repos of templates.
--   By tagging templates for each version of Wasp CLI, we ensure that each release of
--   Wasp CLI uses correct version of templates, that work with it.
waspVersionTemplateGitTag :: String
waspVersionTemplateGitTag = "wasp-v0.12-template"

findTemplateByString :: [StarterTemplate] -> String -> Maybe StarterTemplate
findTemplateByString templates query = find ((== query) . show) templates

readWaspProjectSkeletonFiles :: IO [(Path System (Rel WaspProjectDir) File', Text)]
readWaspProjectSkeletonFiles = do
  skeletonFilesDir <- (</> [reldir|Cli/templates/skeleton|]) <$> Data.getAbsDataDirPath
  skeletonFilePaths <- listDirectoryDeep skeletonFilesDir
  mapM (\path -> (path,) <$> readFileStrict (skeletonFilesDir </> path)) skeletonFilePaths

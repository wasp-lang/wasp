{-# LANGUAGE InstanceSigs #-}
{-# LANGUAGE TupleSections #-}

module Wasp.Cli.Command.CreateNewProject.StarterTemplates
  ( getStarterTemplates,
    StarterTemplate (..),
    DirBasedTemplateMetadata (..),
    findTemplateByString,
    defaultStarterTemplate,
    readWaspProjectSkeletonFiles,
  )
where

import Data.Either (fromRight)
import Data.Foldable (find)
import Data.Text (Text)
import StrongPath (File', Path, Rel, System, reldir, (</>))
import qualified Wasp.Cli.Command.CreateNewProject.StarterTemplates.GhStartersRepo.Github as StartersRepoGithub
import Wasp.Cli.Common (WaspProjectDir)
import qualified Wasp.Cli.GithubRepo as GhRepo
import qualified Wasp.Cli.Interactive as Interactive
import qualified Wasp.Data as Data
import Wasp.Util.IO (listDirectoryDeep, readFileStrict)

-- TODO: Poperly do renaming of GhStartersRepoStarterTemplate. Files, modules also.

data StarterTemplate
  = -- | Template from the wasp-lang/starters Github repo.
    GhStartersRepoStarterTemplate DirBasedTemplateMetadata
  | -- | Template from a Github repo.
    GhRepoStarterTemplate GhRepo.GithubRepoRef DirBasedTemplateMetadata
  | -- | Template from a disk, that comes bundled with wasp CLI.
    LocalStarterTemplate DirBasedTemplateMetadata
  | -- | Template that will be dynamically generated by Wasp AI based on user's input.
    AiGeneratedStarterTemplate
  deriving (Eq)

data DirBasedTemplateMetadata = DirBasedTemplateMetadata
  { _name :: String,
    _path :: String, -- Path to a directory containing template files.
    _description :: String
  }
  deriving (Eq, Show)

instance Show StarterTemplate where
  show (GhStartersRepoStarterTemplate metadata) = _name metadata
  show (GhRepoStarterTemplate _ metadata) = _name metadata
  show (LocalStarterTemplate metadata) = _name metadata
  show AiGeneratedStarterTemplate = "ai-generated"

instance Interactive.IsOption StarterTemplate where
  showOption :: StarterTemplate -> String
  showOption = show
  showOptionDescription (GhStartersRepoStarterTemplate metadata) = Just $ _description metadata
  showOptionDescription (GhRepoStarterTemplate _ metadata) = Just $ _description metadata
  showOptionDescription (LocalStarterTemplate metadata) = Just $ _description metadata
  showOptionDescription AiGeneratedStarterTemplate =
    Just "ðŸ¤– Describe an app in a couple of sentences and have Wasp AI generate initial code for you. (experimental)"

getStarterTemplates :: IO [StarterTemplate]
getStarterTemplates = do
  ghStartersRepoTemplates <- fromRight [] <$> fetchGhStartersRepoStarterTemplates
  return $
    [defaultStarterTemplate]
      ++ ghStartersRepoTemplates
      ++ [openSaasStarterTemplate]
      ++ [AiGeneratedStarterTemplate]

openSaasStarterTemplate :: StarterTemplate
openSaasStarterTemplate =
  GhRepoStarterTemplate
    ( GhRepo.GithubRepoRef
        { GhRepo._repoOwner = "wasp-lang",
          GhRepo._repoName = "open-saas",
          GhRepo._repoReferenceName = "main"
        }
    )
    ( DirBasedTemplateMetadata
        { _name = "saas",
          _description = "TODO",
          _path = "."
        }
    )

fetchGhStartersRepoStarterTemplates :: IO (Either String [StarterTemplate])
fetchGhStartersRepoStarterTemplates = do
  fmap extractTemplateNames <$> StartersRepoGithub.fetchTemplatesGithubData
  where
    extractTemplateNames :: [StartersRepoGithub.TemplateGithubData] -> [StarterTemplate]
    -- Each folder in the repo is a template.
    extractTemplateNames =
      map
        ( \metadata ->
            GhStartersRepoStarterTemplate $
              DirBasedTemplateMetadata
                { _name = StartersRepoGithub._name metadata,
                  _path = StartersRepoGithub._path metadata,
                  _description = StartersRepoGithub._description metadata
                }
        )

defaultStarterTemplate :: StarterTemplate
defaultStarterTemplate =
  LocalStarterTemplate $
    DirBasedTemplateMetadata
      { _name = "basic",
        _path = "basic",
        _description = "Simple starter template with a single page."
      }

findTemplateByString :: [StarterTemplate] -> String -> Maybe StarterTemplate
findTemplateByString templates query = find ((== query) . show) templates

readWaspProjectSkeletonFiles :: IO [(Path System (Rel WaspProjectDir) File', Text)]
readWaspProjectSkeletonFiles = do
  skeletonFilesDir <- (</> [reldir|Cli/templates/skeleton|]) <$> Data.getAbsDataDirPath
  skeletonFilePaths <- listDirectoryDeep skeletonFilesDir
  mapM (\path -> (path,) <$> readFileStrict (skeletonFilesDir </> path)) skeletonFilePaths

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                               Int                    @id @default(autoincrement())
  isOnAfterSignupHookCalled        Boolean                @default(false)
  isOnAfterLoginHookCalled         Boolean                @default(false)
  isOnAfterEmailVerifiedHookCalled Boolean                @default(false)
  tasks                            Task[]
  address                          String?
  votes                            TaskVote[]
  uppercaseTextRequests            UppercaseTextRequest[]
  auth                             Auth?
}

model Task {
  id          Int            @id @default(autoincrement())
  description String
  isDone      Boolean        @default(false)
  user        User           @relation(fields: [userId], references: [id])
  userId      Int
  votes       TaskVote[]
  visibility  TaskVisibility @default(PRIVATE)
}

model TaskVote {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId Int
  task   Task   @relation(fields: [taskId], references: [id])
  taskId Int
}

model UppercaseTextRequest {
  id        String                    @id @default(cuid())
  input     String
  output    String?
  user      User                      @relation(fields: [userId], references: [id])
  userId    Int
  state     UppercaseTextRequestState @default(PENDING)
  createdAt DateTime                  @default(now())
}

model Auth {
  id         String         @id @default(uuid())
  userId     Int?           @unique
  user       User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  identities AuthIdentity[]
  sessions   Session[]
}

model AuthIdentity {
  providerName   String
  providerUserId String
  providerData   String @default("{}")
  authId         String
  auth           Auth   @relation(fields: [authId], references: [id], onDelete: Cascade)

  @@id([providerName, providerUserId])
}

model Session {
  id        String   @id @unique
  expiresAt DateTime
  userId    String
  auth      Auth     @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@index([userId])
}

enum TaskVisibility {
  PRIVATE
  LINK_ONLY
  PUBLIC
}

enum UppercaseTextRequestState {
  PENDING
  SUCCESS
  ERROR
}
